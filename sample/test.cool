class A {
    var :Int<-0;


    set_var(num :Int) :SELF_TYPE

    {
        {
                 var <- num;
                 var <- num1 - num2;

             }
         }

    ;

    method2(num1 :Int, num2 :Int) :B

    {
        --plus
        (let x :Int in {
        x<-num1 + num2;
        (new B).set_var(x);
    } )}

    ;

    method2(num5 :Int, num4 :Int) :D
    {
        --plus
        (let x :Int in {
        x<-num1 + num2;
        (new B).set_var(x);
    } )}
    ;
};

class A {
    char :String;
};

class B inherits A { -- B is a number squared

    method5(num :Int) :C
    {--square
        (let x :Int in {
        x<-num * num;
        (new L).set_var(x);
    } )

    }
    ;
};

class C inherits B {
    method6(num :Int) :B

    {
        --negate
        (let x :Int in {
        x<- ~num;
        (new B).set_var(x);
    } )}

    ;
};

class Main inherits IO {
    char :String;
    avar :A;
    flag :Bool<-true;

    char :String;

    main() :Object

    {
        {
            avar<-(new A);
            char <-"a";
            while flag loop {
            if char ="j" then
             avar <-(new A)
            else
             avar<-(new B)
            fi;

        }
        pool;
        }
    }

    ;
};